#=========================== Filebeat prospectors =============================

filebeat.prospectors:

# Each - is a prospector. Most options can be set at the prospector level, so
# you can use different prospectors for various configurations.
# Below are the prospector specific configurations.

{% for prospector in item.PROSPECTORS %}
- input_type: {{ prospector.input_type }}

  # Paths that should be crawled and fetched. Glob based paths.
  paths:
  {% for path in prospector.paths %}
    - {{ path }}
  {% endfor %}

  document_type: {{ prospector.document_type }}

  # Exclude lines. A list of regular expressions to match. It drops the lines that are
  # matching any regular expression from the list.
  #exclude_lines: ["^DBG"]

  # Include lines. A list of regular expressions to match. It exports the lines that are
  # matching any regular expression from the list.
  #include_lines: ["^ERR", "^WARN"]

  # Exclude files. A list of regular expressions to match. Filebeat drops the files that
  # are matching any regular expression from the list. By default, no files are dropped.
  #exclude_files: [".gz$"]

  # Optional additional fields. These field can be freely picked
  # to add additional information to the crawled log files for filtering
  #fields:
  #  level: debug
  #  review: 1

{% if prospector.multiline_fg %}
  ### Multiline options

  multiline.pattern: "{{ prospector.multiline_pattern }}"

  # Defines if the pattern set under pattern should be negated or not. Default is false.
  multiline.negate: {{ prospector.multiline_negate }}

  # Match can be set to "after" or "before". It is used to define if lines should be append to a pattern
  # that was (not) matched before or after or as long as a pattern is not matched based on negate.
  # Note: After is the equivalent to previous and before is the equivalent to to next in Logstash
  multiline.match: {{ prospector.multiline_match }}

{% endif %}

{% endfor %}

#================================ General =====================================

# The name of the shipper that publishes the network data. It can be used to group
# all the transactions sent by a single shipper in the web interface.
#name:

# The tags of the shipper are included in their own field with each
# transaction published.
#tags: ["service-X", "web-tier"]

# Optional fields that you can specify to add additional information to the
# output.
#fields:
#  env: staging

#================================ Outputs =====================================
{% if item.ES_VARS.flag %}
#-------------------------- Elasticsearch output ------------------------------
output.elasticsearch:
  # Array of hosts to connect to.
  hosts: ["{{ item.ES_VARS.ES_HOST }}"]

  # Optional protocol and basic auth credentials.
  #protocol: "https"
  #username: "elastic"
  #password: "changeme"
{% endif %}

{% if item.LS_VARS.flag %}
#----------------------------- Logstash output --------------------------------
output.logstash:
  # The Logstash hosts
  hosts: ["{{ item.LS_VARS.LS_HOST }}"]

  # Optional SSL. By default is off.
  # List of root certificates for HTTPS server verifications
  ssl.certificate_authorities: ["{{ item.LS_VARS.LS_CA }}"]

  # Certificate for SSL client authentication
  ssl.certificate: "{{ item.LS_VARS.LS_CERT }}"

  # Client Certificate Key
  ssl.key: "{{ item.LS_VARS.LS_CLIENT_KEY }}"
{% endif %}

#================================ Logging =====================================

# Sets log level. The default log level is info.
# Available log levels are: critical, error, warning, info, debug
#logging.level: debug

# At debug level, you can selectively enable logging only for some components.
# To enable all selectors use ["*"]. Examples of other selectors are "beat",
# "publish", "service".
#logging.selectors: ["*"]